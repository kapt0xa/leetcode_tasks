//
// https://leetcode.com/problems/longest-substring-without-repeating-characters/
// time O(N)
// memory O(alphabet_size) 
//

class Solution {
    mutable unordered_map<char, int> char_to_last_pos;
    int& GetLastPos(char c)
    {
        auto [found, _] = char_to_last_pos.try_emplace(c, -1);
        return found->second;
    }
public:
    int lengthOfLongestSubstring(const string& s) {
        char_to_last_pos.clear();

        int max_len = 0;
        int current_len = 0;

        for(int i = 0; i != static_cast<int>(s.size()); ++i)
        {
            char current = s[i];
            int& last_pos = GetLastPos(current);
            ++current_len;
            current_len = min(current_len, i - last_pos);
            max_len = max(max_len, current_len);
            last_pos = i;
        }

        return max_len;
    }
};
